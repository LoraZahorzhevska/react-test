{"version":3,"sources":["components/TodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","todos","onDeleteTodo","map","id","text","className","type","onClick","App","state","completed","deleteTodo","todoId","setState","prevState","filter","todo","this","completeTodosCount","reduce","total","length","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAoBeA,EAhBE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACzB,OACE,6BAEGD,EAAME,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACT,qBAAaC,UAAU,iBAAvB,UACE,4BAAID,IACJ,wBAAQE,KAAK,SAASC,QAAS,kBAAMN,EAAaE,IAAlD,0DAFOA,SC8DFK,E,4MAtDbC,MAAQ,CACNT,MAAO,CACL,CAAEG,GAAI,OAAQC,KAAM,wFAAwBM,WAAW,GACvD,CAAEP,GAAI,OAAQC,KAAM,yFAA8BM,WAAW,GAC7D,CAAEP,GAAI,OAAQC,KAAM,yDAAkBM,WAAW,K,EAMrDC,WAAa,SAACC,GACZ,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5Bd,MAAOc,EAAUd,MAAMe,QAAO,SAACC,GAAD,OAAUA,EAAKb,KAAOS,U,4CAQxD,WACE,IAAQZ,EAAUiB,KAAKR,MAAfT,MAEFkB,EAAqBlB,EAAMmB,QAE/B,SAACC,EAAOJ,GAAR,OAAkBA,EAAKN,UAAYU,EAAQ,EAAIA,IAC/C,GAGF,OACE,qCAGE,gCACE,mGAAoBpB,EAAMqB,UAC1B,iIAAyBH,QAG3B,cAAC,EAAD,CAAUlB,MAAOA,EAAOC,aAAcgB,KAAKN,oB,GAvCjCW,aCJHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e1f3f028.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoList.css\";\r\n\r\n// {todos} - деструкруризируется свойство пропс\r\nconst TodoList = ({ todos, onDeleteTodo }) => {\r\n  return (\r\n    <ul>\r\n      {/* map это цикл, для каждой анонимной ф-ии в кнопки он будет свой */}\r\n      {todos.map(({ id, text }) => (\r\n        <li key={id} className=\"TodoList__item\">\r\n          <p>{text}</p>\r\n          <button type=\"button\" onClick={() => onDeleteTodo(id)}>\r\n            Удалить\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n// import Counter from \"./components/counter/Counter\";\n// import Dropdown from \"./components/Dropdown/Dropdown\";\n// import ColorPicker from \"./components/ColorPicker/ColorPicker\";\nimport TodoList from \"./components/TodoList\";\n\n// const colorPickerOptions = [\n//   { label: \"red\", color: \"#F44336\" },\n//   { label: \"green\", color: \"#4CAF50\" },\n//   { label: \"blue\", color: \"#2196F3\" },\n//   { label: \"grey\", color: \"#607D8B\" },\n//   { label: \"pink\", color: \"#E91E63\" },\n//   { label: \"indigo\", color: \"#3F51B5\" },\n// ];\n\nclass App extends Component {\n  state = {\n    todos: [\n      { id: \"id-1\", text: \"Выучить основы React\", completed: true },\n      { id: \"id-2\", text: \"Разобраться с React Router\", completed: false },\n      { id: \"id-3\", text: \"Пережить Redux\", completed: false },\n    ],\n  };\n\n  // мы хотим изменить состояние от предыдущего\n  // хотим взять все todo кроме того id которого мы передаем\n  deleteTodo = (todoId) => {\n    this.setState((prevState) => ({\n      todos: prevState.todos.filter((todo) => todo.id !== todoId),\n      // мы не мутируем коллекцию\n      // prevState.todos - предыдущее значение todos\n      // filter((todo) => todo.id !== todoId) - для каждой из них проверяем айишник\n      // в новый массив возвращаем тот id, который не равен\n    }));\n  };\n\n  render() {\n    const { todos } = this.state;\n\n    const completeTodosCount = todos.reduce(\n      // (acc, todo) => (todo.completed ? acc + 1 : acc),\n      (total, todo) => (todo.completed ? total + 1 : total),\n      0\n    );\n\n    return (\n      <>\n        {/* <ColorPicker options={colorPickerOptions} /> */}\n\n        <div>\n          <span>Общее кол-во:{todos.length}</span>\n          <span>Кол-во выполненых:{completeTodosCount}</span>\n        </div>\n\n        <TodoList todos={todos} onDeleteTodo={this.deleteTodo} />\n      </>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <>\n//       {/* <ColorPicker options={colorPickerOptions} /> */}\n\n//       <TodoList />\n//     </>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}